# Compute credible region for each posterior predictive sample
# Create matrix to store reconstructed curves in
reconstruct = matrix(NA, nrow = steps, ncol = M)
# Reconstruct curves
for (i in 1:steps) {
reconstruct[i, ] = f(xnew, results$alpha[i], results$beta[i], results$gamma[i])
}
# Compute lower and upper bounds
pointwise_ci <- apply(reconstruct, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], x[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Create matrix to store reconstructed curves in
reconstruct = matrix(NA, nrow = steps, ncol = N)
# Reconstruct curves
for (i in 1:steps) {
reconstruct[i, ] = f(d$x, results$alpha[i], results$beta[i], results$gamma[i])
}
# Compute lower and upper bounds
pointwise_ci <- apply(reconstruct, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Plot original data
plot(x, y, col = "navyblue", pch = 20)
# Overlay the pointwise credible region
for (i in 1:N) {
segments(x[i], pointwise_ci[,i][1], x[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Overlay the pointwise credible region
for (i in 1:N) {
segments(x[i], pointwise_ci[,i][1], x[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
results
?apply
View(reconstruct)
reconstruct
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:M) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution (for x = 20)
ynew ~ dnorm((alpha * sin(xnew)) + (beta * exp(-1 * gamma * (xnew**2))), 1 / sigma ^ 2)
}"
# Run MCMC
source("run_jags.R")
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution (for x = 20)
ynew ~ dnorm((alpha * sin(xnew)) + (beta * exp(-1 * gamma * (xnew**2))), 1 / sigma ^ 2)
}"
# Run MCMC
source("run_jags.R")
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution
for (j in 1:N) {
ynew[i] ~ dnorm((alpha * sin(xnew[j])) + (beta * exp(-1 * gamma * (xnew[j]**2))), 1 / sigma ^ 2)
}"
# Run MCMC
source("run_jags.R")
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution
for (j in 1:N) {
ynew[i] ~ dnorm((alpha * sin(xnew[j])) + (beta * exp(-1 * gamma * (xnew[j]**2))), 1 / sigma ^ 2)
}
}"
# Run MCMC
source("run_jags.R")
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution
for (j in 1:N) {
ynew[j] ~ dnorm((alpha * sin(xnew[j])) + (beta * exp(-1 * gamma * (xnew[j]**2))), 1 / sigma ^ 2)
}
}"
# Run MCMC
source("run_jags.R")
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = xnew, N = M)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution
for (j in 1:N) {
ynew[j] ~ dnorm((alpha * sin(x[j])) + (beta * exp(-1 * gamma * (x[j]**2))), 1 / sigma ^ 2)
}
}"
# Run MCMC
source("run_jags.R")
results$ynew
# Compute credible region for each posterior predictive sample
pointwise_ci <- apply(results$ynew, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
pointwise_ci
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
results$ynew
# New x-values
xnew = seq(2, 2.5, by = 0.05)
M = length(xnew)  # Hint: This will be useful for another for() loop
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Variables to monitor
variable_names = c("ynew","alpha", "beta", "gamma", "sigma")
# Data as a list
data = list(x = d$x, y = d$y, N = 128, M = M, xnew = xnew)
# Write JAGS model
model = "model{
# Prior
alpha ~ dnorm(0, 1 / 1000^2)
beta ~ dnorm(0, 1 / 1000^2)
gamma ~ dnorm(0, 1 / 1000^2)
log_sigma ~ dunif(-10, 10)
sigma = exp(log_sigma)
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm((alpha * sin(x[i])) + (beta * exp(-1 * gamma * (x[i]**2))), 1 / sigma ^ 2)
}
# Posterior predictive distribution
for (j in 1:M) {
ynew[j] ~ dnorm((alpha * sin(xnew[j])) + (beta * exp(-1 * gamma * (xnew[j]**2))), 1 / sigma ^ 2)
}
}"
# Run MCMC
source("run_jags.R")
# Compute credible region for each posterior predictive sample
pointwise_ci <- apply(results$ynew, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci[,i][1], xnew[i], pointwise_ci[,i][2], col = "red")
#points(x[i], pointwise_ci[,i][1], col = "red")
#points(x[i], pointwise_ci[,i][2], col = "red")
}
# Overlay the pointwise credible region
for (i in 1:N) {
segments(x[i], pointwise_ci[,i][1], x[i], pointwise_ci[,i][2], col = "red")
}
# Compute lower and upper bounds
pointwise_ci <- apply(reconstruct, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Overlay the pointwise credible region
for (i in 1:N) {
segments(x[i], pointwise_ci[,i][1], x[i], pointwise_ci[,i][2], col = "red")
}
# Compute lower and upper bounds
pointwise_ci1 <- apply(reconstruct, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Compute credible region for each posterior predictive sample
pointwise_ci2 <- apply(results$ynew, 2, function(x) quantile(x, probs = c(0.025, 0.975)))
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci2[,i][1], xnew[i], pointwise_ci2[,i][2], col = "red")
}
# Plot data with new range of values
plot(x, y, col = "grey80", pch = 20, xlim = c(-2, 2.5))
for (i in 1:N) {
segments(x[i], pointwise_ci1[,i][1], x[i], pointwise_ci1[,i][2], col = "blue")
}
# Overlay the pointwise credible region
for (i in 1:M) {
segments(xnew[i], pointwise_ci2[,i][1], xnew[i], pointwise_ci2[,i][2], col = "red")
}
x = seq(0, 10, length = 1000)
plot(x, dgamma(x, shape = 3, rate = 1), type = "l", lwd = 2, ylab = "Density")
lines(x, dgamma(x, shape = 0.01, rate = 0.01), col = 2, lwd = 2)
legend("topright", col = c(1, 2), lty = c(1, 1), lwd = c(2, 2),
legend = c("Gamma(3, 1)", "Gamma(0.01, 0.01)"))
# Summarise posterior
mean(results$lambda)  # Posterior mean
# Model
# Notice the for loop for the likelihood
model = "model{
# Parameter and prior
lambda ~ dunif(0, 7)
# Likelihood
for (i in 1:N) {
y[i] ~ dpois(lambda)
}
}"
# Running data extracted from Fitbit App
data = list(y = c(3, 0, 1, 4, 2, 2, 3, 2, 2, 2, 2, 1, 2, 4, 4, 3,
4, 3, 4, 2, 3, 2, 2, 1, 2, 2, 0, 5, 3, 2, 5, 5,
1, 2, 3, 2, 3),
N = 37)
# Variables to monitor
variable_names = c("lambda")
# Plot raw data
plot(1:data$N,
data$y,
xlab = "Week",
ylab = "Number of Days Running",
col = "navyblue",
pch = 20)
# How many burn-in steps?
burn_in = 1000
# How many proper steps?
steps = 10000
# Thinning? #saved states in the output
thin = 1
# Random number seed
seed = 1234
# Run MCMC
source("run_jags.R")
# Trace plot
plot(results$lambda,
type = "l",
xlab = "Iteration",
ylab = expression(lambda),
col = "navyblue")
# Histogram
hist(results$lambda,
breaks = 50,
xlab = expression(lambda),
main = expression("Histogram of"~lambda~"| x"),
col = "lightblue",
freq = FALSE)
# Summarise posterior
mean(results$lambda)  # Posterior mean
var(results$lambda)   # Posterior variance
quantile(results$lambda, probs = c(0.025, 0.975))  # 95% CI
# New fictional data. I run 6 days in Week 1 and 7 in Week 2
data = list(y = c(6, 7), N = 2)
# New model - use a Gamma(0.001, 0.001) prior
model = "model{
# Parameter and prior
lambda ~ dgamma(0.001, 0.001)
# Likelihood
for (i in 1:N) {
y[i] ~ dpois(lambda)
}
}"
# Run MCMC
source("run_jags.R")
# Plot histogram
hist(results$lambda,
breaks = 50,
xlab = expression(lambda),
main = expression("Histogram of"~lambda~"| x"),
col = "lightblue",
freq = FALSE)
# New fictional data. I run 6 days in Week 1 and 7 in Week 2
data = list(y = c(6, 7), N = 2)
# New model - use a Gamma(0.001, 0.001) prior
model = "model{
# Parameter and prior
lambda ~ dgamma(6, 1)
# Likelihood
for (i in 1:N) {
y[i] ~ dpois(lambda)
}
}"
# Run MCMC
source("run_jags.R")
# Plot histogram
hist(results$lambda,
breaks = 50,
xlab = expression(lambda),
main = expression("Histogram of"~lambda~"| x"),
col = "lightblue",
freq = FALSE)
# New model - use a Gamma(0.001, 0.001) prior
model = "model{
# Parameter and prior
lambda ~ dgamma(0.001, 0.001)
# Likelihood
for (i in 1:N) {
y[i] ~ dpois(lambda)
}
}"
# Run MCMC
source("run_jags.R")
# Plot histogram
hist(results$lambda,
breaks = 50,
xlab = expression(lambda),
main = expression("Histogram of"~lambda~"| x"),
col = "lightblue",
freq = FALSE)
# New fictional data. I run 6 days in Week 1 and 7 in Week 2
data = list(y = c(6, 7), N = 2)
# New model - use a Gamma(0.001, 0.001) prior
model = "model{
# Parameter and prior
lambda ~ dgamma(6, 1)
# Likelihood
for (i in 1:N) {
y[i] ~ dpois(lambda)
}
}"
# Run MCMC
source("run_jags.R")
# Plot histogram
hist(results$lambda,
breaks = 50,
xlab = expression(lambda),
main = expression("Histogram of"~lambda~"| x"),
col = "lightblue",
freq = FALSE)
x = seq(0, 10, length = 1000)
plot(x, dgamma(x, shape = 3, rate = 1), type = "l", lwd = 2, ylab = "Density")
lines(x, dgamma(x, shape = 0.01, rate = 0.01), col = 2, lwd = 2)
legend("topright", col = c(1, 2), lty = c(1, 1), lwd = c(2, 2),
legend = c("Gamma(3, 1)", "Gamma(0.01, 0.01)"))
?dgamma
library(readr)
movie_poster <- read_csv("~/Documents/git_new/A2_compsci235/movies/adapters/data/movie_poster.csv")
View(movie_poster)
movies_df <- Data1000Movies
movie_pics <- movie_poster
d_full <- movies_df %>%
left_join(movie_pics, by = "Rank")
movies_df <- Data1000Movies
movie_pics <- movie_poster
d_full <- movies_df %>%
left_join(movie_pics, by = "Rank")
d_full <- movies_df %>%
left_join(movie_pics)
View(movie_poster)
?read_csv
movie_pics <- read_csv("~/Documents/git_new/A2_compsci235/movies/adapters/data/movie_poster.csv", col_names = F)
View(movie_pics)
?left_join
d_full <- movies_df %>%
left_join(movie_pics, by=c("Rank"="X1"))
View(d_full)
movies_df <- Data1000Movies
movie_pics <- read_csv("~/Documents/git_new/A2_compsci235/movies/adapters/data/movie_poster.csv", col_names = F)
d_full <- movies_df %>%
left_join(movie_pics, by=c("Rank"="X1"))
write.csv(d_full,'Data1000MoviesWithPics.csv')
setwd("~/Documents/git_new/A2_compsci235/movies/adapters/data")
write.csv(d_full,'Data1000MoviesWithPics.csv')
View(d_full)
d_ful %>% count(Year)
d_full %>% count(Year)
?write.csv
write.csv(d_full,'Data1000MoviesWithPics.csv', row.names=F)
View(Data1000Movies)
View(movie_pics)
movie_pics <- movie_pics %>%
mutate(X1 = X1 + 1)
d_full <- movies_df %>%
left_join(movie_pics, by=c("Rank"="X1"))
write.csv(d_full,'Data1000MoviesWithPics.csv', row.names=F)
View(d_full)
View(d_full)
movie_pics <- read_csv("~/Documents/git_new/A2_compsci235/movies/adapters/data/movie_poster.csv", col_names = F)
View(movie_pics)
d_full <- movies_df %>%
left_join(movie_pics, by=c("Rank"="X1"))
write.csv(d_full,'Data1000MoviesWithPics.csv', row.names=F)
